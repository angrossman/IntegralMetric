{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7b4da892",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "from datetime import datetime, timedelta\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4a5f1d9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from faker import Faker\n",
    "\n",
    "fake = Faker(\"ru_RU\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3cd3f03b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class RawData:\n",
    "    def __init__(self, raw_data_id, data_source, data_content, collection_date):\n",
    "        self.raw_data_id = raw_data_id\n",
    "        self.data_source = data_source\n",
    "        self.data_content = data_content\n",
    "        self.collection_date = collection_date\n",
    "\n",
    "class CleanedData:\n",
    "    def __init__(self, cleaned_data_id, raw_data_id, created_by, cleaned_content, cleaning_date):\n",
    "        self.cleaned_data_id = cleaned_data_id\n",
    "        self.raw_data_id = raw_data_id\n",
    "        self.created_by = created_by\n",
    "        self.cleaned_content = cleaned_content\n",
    "        self.cleaning_date = cleaning_date\n",
    "        \n",
    "class Task:\n",
    "    def __init__(self, task_id, assigned_to, task_description, status, due_date, completion_time, reworks):\n",
    "        self.task_id = task_id\n",
    "        self.assigned_to = assigned_to\n",
    "        self.task_description = task_description\n",
    "        self.status = status\n",
    "        self.due_date = due_date\n",
    "        self.completion_time = completion_time\n",
    "        self.reworks = reworks\n",
    "        \n",
    "class Report:\n",
    "    def __init__(self, report_id, cleaned_data_id, user_id, task_id, approved_by, content, creation_date):\n",
    "        self.report_id = report_id\n",
    "        self.cleaned_data_id = cleaned_data_id\n",
    "        self.user_id = user_id\n",
    "        self.task_id = task_id\n",
    "        self.approved_by = approved_by\n",
    "        self.content = content\n",
    "        self.creation_date = creation_date\n",
    "\n",
    "\n",
    "class Recommendation:\n",
    "    def __init__(self, recommendation_id, user_id, approved_by, report_id, task_id, content, creation_date):\n",
    "        self.recommendation_id = recommendation_id\n",
    "        self.user_id = user_id\n",
    "        self.approved_by = approved_by\n",
    "        self.report_id = report_id\n",
    "        self.task_id = task_id\n",
    "        self.content = content\n",
    "        self.creation_date = creation_date\n",
    "\n",
    "class Strategy:\n",
    "    def __init__(self, strategy_id, report_id, recommendation_id, task_id, user_id, content, creation_date):\n",
    "        self.strategy_id = strategy_id\n",
    "        self.report_id = report_id\n",
    "        self.recommendation_id = recommendation_id\n",
    "        self.task_id = task_id\n",
    "        self.user_id = user_id\n",
    "        self.content = content\n",
    "        self.creation_date = creation_date\n",
    "\n",
    "class User:\n",
    "    def __init__(self, user_id, name, role, email):\n",
    "        self.user_id = user_id\n",
    "        self.name = name\n",
    "        self.role = role\n",
    "        self.email = email"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "888d8fc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_random_data(num_entries):\n",
    "    raw_data_list = []\n",
    "    cleaned_data_list = []\n",
    "    task_list = []\n",
    "    report_list = []\n",
    "    recommendation_list = []\n",
    "    strategy_list = []\n",
    "    user_list = []\n",
    "\n",
    "\n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        user = User(\n",
    "            user_id=i,\n",
    "            name=fake.name(),\n",
    "            role=random.choice(['Руководитель', 'Стратег', 'Аналитик данных', 'Маркетинговый аналитик', 'Помощник', 'SMM-спец', 'SEO-спец']),\n",
    "            email=fake.email()\n",
    "        )\n",
    "        user_list.append(user)\n",
    "\n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        raw_data = RawData(\n",
    "            raw_data_id=i,\n",
    "            data_source=fake.company(),\n",
    "            data_content=fake.text(),\n",
    "            collection_date=fake.date()\n",
    "        )\n",
    "        raw_data_list.append(raw_data)\n",
    "\n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        cleaned_data = CleanedData(\n",
    "            cleaned_data_id=i,\n",
    "            raw_data_id=random.choice(raw_data_list).raw_data_id,\n",
    "            created_by=random.choice(user_list).user_id,\n",
    "            cleaned_content=fake.text(),\n",
    "            cleaning_date=fake.date()\n",
    "        )\n",
    "        cleaned_data_list.append(cleaned_data)\n",
    "\n",
    "    for i in range(num_entries):\n",
    "        task = Task(\n",
    "            task_id=i,\n",
    "            assigned_to=random.choice(user_list).user_id,\n",
    "            task_description=fake.text(),\n",
    "            status=random.choice(['Pending', 'In Progress', 'Completed']),\n",
    "            due_date=fake.date(),\n",
    "            completion_time=random.randint(1, 30),\n",
    "            reworks=random.randint(0, 5)\n",
    "        )\n",
    "        task_list.append(task)\n",
    "        \n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        report = Report(\n",
    "            report_id=i,\n",
    "            cleaned_data_id=random.choice(cleaned_data_list).cleaned_data_id,\n",
    "            user_id=random.choice(user_list).user_id,\n",
    "            task_id=random.choice(task_list).task_id,\n",
    "            approved_by=random.choice(user_list).name,\n",
    "            content=fake.text(),\n",
    "            creation_date=fake.date()\n",
    "        )\n",
    "        report_list.append(report)\n",
    "\n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        recommendation = Recommendation(\n",
    "            recommendation_id=i,\n",
    "            user_id=random.choice(user_list).user_id,\n",
    "            approved_by=random.choice(user_list).name,\n",
    "            report_id=random.choice(report_list).report_id,\n",
    "            task_id=random.choice(task_list).task_id,\n",
    "            content=fake.text(),\n",
    "            creation_date=fake.date()\n",
    "        )\n",
    "        recommendation_list.append(recommendation)\n",
    "\n",
    "    \n",
    "    for i in range(num_entries):\n",
    "        strategy = Strategy(\n",
    "            strategy_id=i,\n",
    "            report_id=random.choice(report_list).report_id,\n",
    "            recommendation_id=random.choice(recommendation_list).recommendation_id,\n",
    "            user_id=random.choice(user_list).user_id,\n",
    "            task_id=random.choice(task_list).task_id,\n",
    "            content=fake.text(),\n",
    "            creation_date=fake.date()\n",
    "        )\n",
    "        strategy_list.append(strategy)\n",
    "\n",
    "\n",
    "\n",
    "    return raw_data_list, cleaned_data_list, report_list, recommendation_list, strategy_list, user_list, task_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5f3f32b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "raw_data, cleaned_data, report, recommendation, strategy, user, task = generate_random_data(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd9920fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'raw_data_id': 0, 'data_source': 'Бристоль', 'data_content': 'Мгновение тесно разуметься бак райком изображать применяться. Прежний рота горький потянуться.\\nПоздравлять дурацкий затянуться выраженный команда ныне провал невыносимый. Природа падаль ломать ягода.', 'collection_date': '2013-08-03'}\n",
      "{'cleaned_data_id': 0, 'raw_data_id': 8, 'created_by': 2, 'cleaned_content': 'Подробность виднеться вытаскивать расстегнуть некоторый. Жидкий дальний вряд страсть магазин провал. Цвет цель подробность налоговый юный пища.', 'cleaning_date': '2022-08-03'}\n",
      "{'report_id': 0, 'cleaned_data_id': 1, 'user_id': 4, 'task_id': 7, 'approved_by': 'Осипов Эдуард Якубович', 'content': 'Мимо дрогнуть угроза изредка выгнать порог. Появление эффект запретить заведение единый.\\nНабор достоинство снимать поколение тысяча.', 'creation_date': '2009-06-08'}\n",
      "{'recommendation_id': 0, 'user_id': 6, 'approved_by': 'Афанасьева Регина Ильинична', 'report_id': 0, 'task_id': 5, 'content': 'Ярко очередной коричневый забирать экзамен вывести плавно бегать. Слишком носок палка дьявол боец школьный сопровождаться.\\nСовет крыса костер природа.', 'creation_date': '2002-08-20'}\n",
      "{'strategy_id': 0, 'report_id': 2, 'recommendation_id': 6, 'task_id': 0, 'user_id': 6, 'content': 'Командующий функция вскакивать торопливый мгновение мера. Светило рот правильный уничтожение ночь.', 'creation_date': '2019-07-30'}\n",
      "{'user_id': 0, 'name': 'Феврония Аркадьевна Васильева', 'role': 'Руководитель', 'email': 'nesterovnikon@example.net'}\n",
      "{'task_id': 0, 'assigned_to': 6, 'task_description': 'Встать коробка нервно при. Наткнуться развитый очко уточнить спорт развитый ребятишки. Интеллектуальный вывести скрытый. Пятеро выкинуть сопровождаться потрясти собеседник художественный куча.', 'status': 'In Progress', 'due_date': '2001-01-24', 'completion_time': 8, 'reworks': 2}\n"
     ]
    }
   ],
   "source": [
    "print(raw_data[0].__dict__)\n",
    "print(cleaned_data[0].__dict__)\n",
    "print(report[0].__dict__)\n",
    "print(recommendation[0].__dict__)\n",
    "print(strategy[0].__dict__)\n",
    "print(user[0].__dict__)\n",
    "print(task[0].__dict__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a350656",
   "metadata": {},
   "source": [
    "**Что будем использовать для интегральной метрики:**\n",
    "\n",
    "1. Время на задачу (отдельно для каждого сотрудника).\n",
    "2. Количество возвратов на доработку.\n",
    "3. Общее время выполнения всех задач.\n",
    "4. Количество задач, выполненных без возвратов на доработку"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9b17cefc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def integral_metric(tasks, max_allowed_time):\n",
    "    alpha = 0.5\n",
    "    beta = 0.5\n",
    "    \n",
    "    total_tasks = len(tasks)\n",
    "    total_time = sum(task.completion_time for task in tasks)\n",
    "    tasks_without_rework = sum(1 for task in tasks if task.reworks == 0)\n",
    "    \n",
    "    average_time = total_time / total_tasks\n",
    "    time_coefficient = 1 - (average_time / max_allowed_time)\n",
    "    \n",
    "    rework_coefficient = tasks_without_rework / total_tasks\n",
    "    \n",
    "    integral_metric = (alpha * time_coefficient + beta * rework_coefficient) / (alpha + beta)\n",
    "    \n",
    "    return integral_metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "92e67838",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_allowed_time = 15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "905c99e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Интегральная метрика: 0.14\n"
     ]
    }
   ],
   "source": [
    "integral_metric_n = integral_metric(task, max_allowed_time)\n",
    "print(f\"Интегральная метрика: {integral_metric_n:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e22937bd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
